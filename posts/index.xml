<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on looper梦呓</title>
    <link>https://1004032560.github.io/posts/</link>
    <description>Recent content in Posts on looper梦呓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Mon, 12 Jul 2021 17:50:38 +0800</lastBuildDate><atom:link href="https://1004032560.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>第2期looper周报</title>
      <link>https://1004032560.github.io/posts/%E7%AC%AC2%E6%9C%9Flooper%E5%91%A8%E6%8A%A5/</link>
      <pubDate>Mon, 12 Jul 2021 17:50:38 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E7%AC%AC2%E6%9C%9Flooper%E5%91%A8%E6%8A%A5/</guid>
      <description>1、学习 1.1 MySQL 工作中，对数据库表中的一个字段删除掉，表结构的修改语句。之前用的不是很多百度了一下，做个记录，下次肯定还会再用到。
ALTER TABLE uoc_ord_sale_insure MODIFY COLUMN org_tree_path bigint(20) DEFAULT NULL COMMENT &amp;#39;机构树&amp;#39;; 笔记地址：MySQL数据定义语言
1.2 重新维护图床 去年的时候就使用 PicGo 图片上传工具，GitHub 作为图床用过一两次，当时因为网络不是很好，后来也没在用。
最近发现 PicGo 更新了，支持 Gitee（码云）了，使用 Gitee 作为图床，效果显而易见，毕竟是国产的 GitHub，访问速度能够快一些，但缺点就是图片有大小限制 🐛 。
同时呢，新版本的 Typora 也支持上传图片到服务器，返回图片地址 URL，大大的提高了写博客文档的效率。于是我又捡起了我的烂摊子——图床，搭建了一个 Typora + PicGo + GitHub 的一套图文开发组合拳。
图文三剑客【Typora + PicGo + GitHub】
 2、生活 【20210712】毕业正式入职 昨晚到今天北京一直是暴雨状态。
本应该7月1号正式办理入职手续的事情，拖到了今天。转正薪资按照说好的提高了些，但是说好的试用期薪资变低了。虽然转正薪资高了，但是试用期薪资低了，心中肯定是有不满的，毕竟几百块对于一个刚从大学出来的毕业生来说还是很多的。
入职薪资在同行里边中等偏低。感觉无法满足内心的欲望，哈哈哈。只能是希望越多越好。
福不双至，祸不单行。
【20210713】B站崩了 下班之后，我们一起去买菜，取快递，回家做的焖面，一大锅焖面。
晚上十一点二十多，快要睡觉了，忽然群里说 B 站崩了，我火速到达第一现场——知乎，各路大神开始猜测，服务器爆炸说、机房断电说、蒙古上单说等等。
比较可靠点的是 CDN 的锅
 CDN 的全称是 Content Delivery Network，即内容分发网络。CDN 是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术。</description>
    </item>
    
    <item>
      <title>【MySQL】数据定义语言DDL</title>
      <link>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80ddl/</link>
      <pubDate>Mon, 12 Jul 2021 17:36:34 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80ddl/</guid>
      <description>数据定义语言DDL(Data Definition Language) 对象：数据库和表
关键词：create、alter、drop、truncate(删除当前表再新建一个一模一样的表结构)
1、数据库管理 1.1 创建数据库： # 创建数据库 如果不存在 设置字符集 CREATE DATABASE [IF NOT EXISTS] 库名 [ CHARACTER SET 字符集名]; create database [if not exists] school [character set utf8]; 1.2 修改数据库： # 数据库重命名 RENAME DATABASE 旧库名 TO 新库名; rename database shcool to new_school; # 修改数据库字符集 ALTER DATABASE 库名 CHARACTER SET 字符集名; alter database school character set utf64; 1.3 删除数据库： # 删除数据库 如果存在 drop database [if exists] school; 1.4 切换数据库： use school; 2、表管理 2.</description>
    </item>
    
    <item>
      <title>第1期looper周报</title>
      <link>https://1004032560.github.io/posts/%E7%AC%AC1%E6%9C%9Flooper%E5%91%A8%E6%8A%A5/</link>
      <pubDate>Fri, 09 Jul 2021 16:55:59 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E7%AC%AC1%E6%9C%9Flooper%E5%91%A8%E6%8A%A5/</guid>
      <description>1、学习 1.1 结对编程： 结对编程：敏捷开发的一种方式，两个程序员玩同一台电脑，一个负责编写代码，另一个负责观察。比如：狙击手，一般需要一名观察员进行辅助，观测风速、空气湿度、海拔高度等等，有时候也可以互换身份。
那 BUG 出来了，是不是就找不到背锅的人了？
1.2 阅读： 1、我曾不远千里奔赴威尼斯，只为追求我心人—-露丝，她用如水般清澈的目光，看着眼前高达三百二十五英尺的圣马可教堂，却不曾把眼神给予我哪怕一秒，我徒手攀登了那座高大教堂，以我的敏捷身手，很快就站在了教堂顶端，此前对我并不在意的露丝，却因目睹了我矫健伸手和果敢，在我被警察抓走的那一刻，为我倾心，我们因攀登结缘。 《攀登者》
 2、生活 毕业了告诫自己几点：
1、政权出在枪杆子里，搞钱才是硬道理。
2、凭本事，才能走的更远，不受限制，巩固技术，学习业务，提升个人能力。
3、保持独立自主，积极主动询问，完成工作内容。
4、做好信息记录，文档、博客、想法以及内容的产出。
5、算法与数据结构、面试题概念型的东西，多刷题练习，并理解记忆。
6、做一个产品，不断地优化重构，推动价值提升，实现复利。
7、热爱生活，和爱的人好好生活，相互鼓励，共同成长。
8、合理消费，做好资产管理。
 3、理财 暂无</description>
    </item>
    
    <item>
      <title>【Redis】Redis概述</title>
      <link>https://1004032560.github.io/posts/redisredis%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Fri, 09 Jul 2021 15:28:57 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/redisredis%E6%A6%82%E8%BF%B0/</guid>
      <description>Redis概述 1、什么是Redis Redis（Remote Dictionary Server）远程字典服务。
Redis 是一个开源的使用 C 语言编写、支持网络、可基于内存，也可持久化的日志型、Key-Value数据库，并提供多种语言的API。 是当下最热门的 NoSQL 数据库之一。
读的速度是 10 万次/s,写的速度是 8 万次/s 。
2、Redis作用  内存存储（提高效率），持久化（内存中断电即失，需要rdb、aof） 效率高，可以用于高速缓存 发布订阅系统（简单的消息队列） 地图信息分析 计数器，计时器（文章视频浏览量） &amp;hellip;  3、Redis特性  多样的数据类型 持久化 集群 事务 &amp;hellip;  4、学习Redis刚需  Redis官网：https://redis.io/ Redis中文网：http://redis.cn/ 下载地址：通过官网下载即可 Window 系统在 GitHub 上下载  注意：GitHub 上的 Windows 的 Redis 版本已经很久没更新了，官方推荐在 Linux 上安装使用。
5、Windows下安装Redis 官网：https://redis.io/download
Windows 版下载地址：https://github.com/MicrosoftArchive/redis/releases
下载 Redis For window X64.zip 解压到指定目录
安装完成测试：
6、Linux下安装Redis 暂待&amp;hellip;
7、Redis性能测试 Redis 性能测试参数：
   序号 选项 描述 默认值     1 -h 指定服务器主机名 127.</description>
    </item>
    
    <item>
      <title>【Redis】NoSQL概述</title>
      <link>https://1004032560.github.io/posts/redisnosql%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Fri, 09 Jul 2021 15:18:11 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/redisnosql%E7%AE%80%E4%BB%8B/</guid>
      <description>学习是为了让自己过得更加体面
NoSQL概述 1、为什么要使用NoSQL 到了二十世纪之前，网站访问量不是很大，大多数网站都是使用的单机。
到了二十世纪之后，互联网用户数量增多，网站访问量增加，单机不能满足网站的需求，巨增的访问量导致服务器宕机，造成经济损失，主要为了解决：1、数据量太大；2、网站访问量太大；3、用户对数据的读写操作更加频繁等问题。
解决方法：对数据库进行优化（垂直拆分，分库分表，读写分离），同时大部分网站用户 80% 的操作都是读取数据，为了减轻数据库的压力，所以增加缓存就成了刚需。
解决方法的发展过程：1、优化数据结构与算法；2、文件缓存（IO）；3、缓存（Redis）。
解决数据库的问题主要就是解决读、写操作速度问题
2010年到2020年之间，世界发生了翻天覆地的变化，安卓的出现，地图，数据热榜，音乐，图片，文档，视频等数据的快速发展。导致 MySQL 等关系型数据库不够用了（IO压力），不能够很好很快的处理这些数据量大，变化快的数据。如果有一种数据库专门处理这种数据，MySQL 等关系型数据库的压力就会变得十分小，相应的就出现了非关系型数据库 NoSQL。
使用 NoSQL 为了使得不同的数据类型找到相应的解决办法，减轻关系系型数据库的压力。
2、什么是NoSQL NoSQL = Not Only SQL（不仅仅是 SQL）
泛指非关系型数据库的，随着 web 2.0 互联网的诞生，传统的关系型数据库很难处理 web 2.0 的大数据，NoSQL 在当今的
3、NoSQL优势  易扩展，NoSql 数据库种类繁多，数据之间无关系（这样就非常容易扩展）   大数据量高性能，有非常高的读写性能，益于它的无关系行（结构简单）， NoSQL 的缓存是记录级的，是一种细粒度级的缓存，性能高   MySQL 使用 Query Cache （查询缓存），每次表的更新 Cache 就失效，而 NoSQL 的 Cache 是记录级的，同时 Redis 官方说 Redis 每秒读取 11 万次，写 8 万次。
  多样灵活的数据模型，无需事先为要存储的数据建立字段（随时可以存储自定义的数据格式），关系数据库中增、删字段是一件非常麻烦的事情   传统的 RDBMS（关系型数据库系统） 和 NoSQL  RDBMS - 结构化组织 - SQL语言 - 数据和关系都存在单独的表中 - 严格的一致性(每一步数据都必须要一致) - 基础的事务 - .</description>
    </item>
    
    <item>
      <title>Markdown语法&#43;Typora快捷键</title>
      <link>https://1004032560.github.io/posts/markdown%E8%AF%AD%E6%B3%95&#43;typora%E5%BF%AB%E6%8D%B7%E9%94%AE/</link>
      <pubDate>Fri, 09 Jul 2021 14:54:40 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/markdown%E8%AF%AD%E6%B3%95&#43;typora%E5%BF%AB%E6%8D%B7%E9%94%AE/</guid>
      <description>Markdown文档的快捷键使用  注意：有些快捷键需要在设置&amp;ndash;&amp;gt;偏好设置中，按照个人习惯，进行设置
 [TOC]
目录 使用 [toc] 这个就可以快速生成目录
标题 Ctrl + 1 一级标题；
Ctrl + 2 二级标题；
Ctrl + 3三级标题；
Ctrl + 4四级标题；
Ctrl + 5五级标题
Ctrl + 6六级标题
Ctrl + B文本加粗； 我的markdown（普通文本加粗）
 注意：
普通文本加粗和五级标大小一样；
六级标题大小和五级标题一样，但是颜色为浅灰色；
 Ctrl + shift + 5删除线； 不要998，不要996，只需98，轻松带回家
Ctrl+ I文本下斜体；** 我的markdown
Ctrl + U文本划线； 我的Markdown***加粗分割线  ---分割线  Ctrl + K超链接； 哔哩哔哩
文章内的锚链接（#+想要到跳转到的标题）
点击时按住Ctrl进行点击
一级标题
Ctrl + T表格    学号 姓名 班级     10001 阿大 三班   10002 阿二 二班   10003 阿三 一班    Ctrl + shift + Q引用 引用中可以再插入引用（使用‘ &amp;lt; ’）</description>
    </item>
    
    <item>
      <title>毕业季</title>
      <link>https://1004032560.github.io/posts/%E6%AF%95%E4%B8%9A%E5%AD%A3/</link>
      <pubDate>Thu, 24 Jun 2021 18:58:47 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E6%AF%95%E4%B8%9A%E5%AD%A3/</guid>
      <description>How time flies
2021年06月。毕业！一张青春毕业照。
2017年09月。开学！一张录取通知书。
四年的收获是什么？细细想来，好像一事无成。
四年最快乐的时光是什么？最快乐的日子是在培训机构和同系的同学们一起朝九晚九学习的日子。
四年记忆最深的事情是什么？记忆最深的就是莫过于 2020 年初的新冠疫情。
四年最大的变化是什么？最大的变化是内心的变化，性格的变化，能侃侃而谈，能沉默不语。
四年最大的价值是什么？找了一份朝九晚五的实习工作，一份给自己保障的收入。
四年最有意义的微信群是什么？群名「老baby们」。
四年最敷衍的事情是什么？青年大学习等等等（讨厌任务式的强制观看，刷排名）。
四年最美好的收获是什么？找到了女朋友。
四年最特殊的爱好是什么？后半夜逛 P 站。
四年最有意义的课程是什么？B 站的视频课。
四年最有意义的笔记是什么？B 站的弹幕和评论。
四年最喜欢的早餐是什么？鸡蛋+咸烧饼+卤汁豆腐脑。
四年中校园里去的最多的地方是什么？傍晚三四个老伙计去操场（不是图书馆，果然不爱学习）（食堂、宿舍属于特殊情况，不包括在内）。
四年最喜欢的动漫是什么？进击的巨人，尽管很多人说烂尾了。
四年最喜欢的微信公众号是什么？三表龙门阵、why技术、招财小瑜哥（又菜又爱玩）。
四年玩的最多的游戏是什么？和平精英（刺激战场）。
四年最有纪念意义的历史是什么？见证中国移动互联网后半程。
历史不会重演，但总是惊人的相似。四年前也和现在一样，高考完之后，想着未来会去哪座城市，会遇见什么样的风景，会做着什么样的事情。
每一次离开，都可能是最后一次，就这样悄悄地走了，最后一次毕业典礼，也没能再没回学校。</description>
    </item>
    
    <item>
      <title>【MySQL】基础架构</title>
      <link>https://1004032560.github.io/posts/mysql%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 11 May 2021 15:06:29 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid>
      <description>MySQL 可以分为 Server 层和存储引擎层两部分
Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。
而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5版本开始成为了默认存储引擎。</description>
    </item>
    
    <item>
      <title>【Java】面向对象的三大特征</title>
      <link>https://1004032560.github.io/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</link>
      <pubDate>Sun, 11 Apr 2021 15:15:09 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</guid>
      <description>1、面向对象的特征 面向对象的最终目的是要构建强健、安全、高效的项目，也就是要实现项目的高内聚和低耦合：
 高内聚：把该模块的内部数据，功能细节隐藏在模块内部，不允许外界直接干预，只能通过公开的接口访问。 低耦合：该模块只需要给外界暴露少量功能方法，模块之间相互依赖的程度不高。  封装： 「封装」字面意思是把某个东西装起来，不让外界看到，也体现出了「简洁美」。
例如：洗衣机只能看到外部操作按钮，洗衣服时无需关注洗衣机内部原理，也不会看到内部凌乱的走线，影响用户体验。
在面向对象的思想中「封装」则表示在一个实体类中将属性私有化，提供一些外部可以访问该属性的方法；
或者对功能实现类进行抽象化，提炼出接口，只供外界调用，不对外暴露该方法的具体实现。
继承： 「继承」字面意思是父与子之间发生的一种关系。
在面向对象的思想中「继承」是指从已有类得到继承信息创建新类的过程。
提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。
继承让变化中的软件系统有了一定的延续性。
Object 类是所有类的父类（树结构中的根节点） 。当一个类没有显式声明父类，则该类会隐式继承 Object 类。
多态： 多态性是指允许不同子类型的对象对同一消息作出不同的响应（动物需要吃东西，小猫吃猫粮，小狗吃狗粮）。
简单的说就是用同样的「对象引用」调用同样的方法但是做了不同的事情（new 一个动物的「对象引用」调用 eat() 方法，但是小猫吃了猫粮，小狗吃了狗粮）。
多态性分为编译时的多态性和运行时的多态性。
方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写 （override）实现的是运行时的多态性（也称为后绑定）。
运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1. 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2. 对象造型（用父类型引用指向子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。
抽象： 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。
接口属于特殊化的抽象，接口可以被其他类实现。
一个类只能继承一个父类，但是可以实现多个接口。</description>
    </item>
    
    <item>
      <title>HUGO基本命令</title>
      <link>https://1004032560.github.io/posts/hugo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 16:14:57 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/hugo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid>
      <description># 创建一个名为「looper梦呓」的 HUGO 站点 hugo new site looper梦呓 # 在「looper梦呓」目录中新建一个 themes 的文件夹用于存储主题 # Hugo Themes : https://themes.gohugo.io # 创建一篇名为「HUGO基本命令」的文章 hugo new posts/HUGO基本命令.md # 启动 HUGO 站点 hugo server # 编译 HUGO 站点内容，生成 public 文件夹 hugo -D 人活着总是要做事情的，既然要做，就要去做有价值的事，既然要做，就要把它做好。</description>
    </item>
    
    <item>
      <title>订单中心数据表</title>
      <link>https://1004032560.github.io/posts/%E8%AE%A2%E5%8D%95%E4%B8%AD%E5%BF%83%E6%95%B0%E6%8D%AE%E8%A1%A8/</link>
      <pubDate>Fri, 16 Oct 2020 17:38:23 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E8%AE%A2%E5%8D%95%E4%B8%AD%E5%BF%83%E6%95%B0%E6%8D%AE%E8%A1%A8/</guid>
      <description>订单中心数据表 uoc_special_apply_order：特价支付表单
uoc_special_apply_ord_item：特价支付明细表单
uoc_special_apply_approval：特价支付审批表单</description>
    </item>
    
    <item>
      <title>学习路线</title>
      <link>https://1004032560.github.io/posts/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Fri, 16 Oct 2020 14:16:27 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
      <description>Java后端开发路线规划 Java基础
集合
线程
IO
MySql
Spring
MyBatis
SpringMVC
SpringBoot
Redis
Dubbo
Zookeeper
RabbitMQ
Linux
Docker</description>
    </item>
    
    <item>
      <title>HUGO-README</title>
      <link>https://1004032560.github.io/posts/hugo-readme/</link>
      <pubDate>Thu, 15 Oct 2020 15:38:23 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/hugo-readme/</guid>
      <description>Hello World </description>
    </item>
    
    <item>
      <title>北漂开始</title>
      <link>https://1004032560.github.io/posts/%E5%8C%97%E6%BC%82%E5%BC%80%E5%A7%8B/</link>
      <pubDate>Mon, 07 Sep 2020 15:33:19 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E5%8C%97%E6%BC%82%E5%BC%80%E5%A7%8B/</guid>
      <description>大家好，我是looper。一个喜欢每天上班摸鱼，下班按时加班的互联网社畜。
先是回忆杀！想起刚去天津上大学的时候，高考成绩并不是很理想，但是，专业选的不错（也多亏了贵人的帮忙）。在去大学的路上，我的心情悲喜交加。那次是我第一次出远门，去很远很憧憬的地方；那次我是大一新生。
而这次我去了北京。
今天看到朋友圈一位大佬的文章「又一批财富自由的程序员」中说到财富自由秘籍，我发现我已经迈出第一步了（这就有人说了你自己啥样没B树？啊这···，我心中只有B+树）。
 “所以在互联网圈，如果你想财富自由，那么你可以这样做：
1 成为程序员
2 入职一家有潜力的科技公司
3 等待公司上市
4 财富自由
骚年想财富自由吗？“
 就在十几天之前，我通过了北京一家公司的面试，成为了Java后端开发的实习生，收到offer的时候激动坏了，但是自己啥样自己心里清楚，没人比我更懂 ♂ 我自己。
其实我是个渣渣，我大三下学期的时候，也就是今年上半年，我报了培训班，学的Java全栈（这个培训班的事到后边再补，慢慢说明培训班的优与弊），所以这样才找到工作的。工作是自己在BOSS直聘上投简历上找的。
就这样我开始了我的北漂之路，&amp;ldquo;北京猿人&amp;quot;上线。
去北京的第一件事租房 我有几个朋友在北京，但是，我们上班的地方都不在一起，离得还是挺远的，所以我只能去租房APP上去找房子。找不到房东，就只能找中介带你去看房，刚去北京就租的能住一个人大小的房子，这就得半个月工资没了，给中介中介费，这里边水真深，不同的中介，中介费不同。同时还要避免一些租房的坑，最近爆出长租公寓爆雷事件么，这些大部分坑的就是实习生（后边可以详细说说租房相关的，给自己挖坑，醉了）。
如果在一个陌生的地方能够有个熟人接应一下心中会感到轻松许多，不用靠中介，那些人给你说一堆花里胡哨的东西，最后就是狠狠的赚你一波，到头来还得感谢人家。像中介费这种不透明的收费完全看人。
感觉大一的新生、刚出社会的实习生等一系列新星少年到一个陌生的地方，都是被割韭菜的对象。希望互联网之下，每条信息能够让大多数人看到，使其获得更多基本信息，不要被割韭菜。
资本搋子半佛老师说过被割韭菜有部分因素是信息不对称造成的。所以我要学会主动出击去寻找更多有价值的信息，并且去分享这些信息和自己已经知道的信息，让更多人的人知道。
去北京的第二件事规划未来 都说35岁是互联网人的分水岭，尤其是程序员，年轻人比你更有活力，学习力强；职场新人大多数比较听话，好管理。不像老员工时间长了之后，有些会变成职场老油条一样，随便一个新来的都能接手你的工作。所以，应该提高自己的核心竞争力，为长久之计做打算。
都知道互联网人应该不断地学习，到底应该学什么？理解什么？我应该像国外的程序员学习，越上年纪的程序员，经验越丰富；而不是只成为一个熟练使用框架的「CRUD工程师」。
算法，操作系统，计算机网络，Java基础等等，是我应该不断学习的专业技术，保持紧跟时事，学习新技术；同时写作，英语，语言表达能力等基本能力需要持续精进。
上边都说的是职场事业中的，对未来的规划中怎么缺少生活呢，生活贯穿于整个事业，事业是为生活做基础铺垫的。生活中的事会去一件一件的认真记录，生活中的目标会去一个一个的努力实现。后续，我会对生活有所记录，记录这短暂而又美好的时光。
最后 Last but not least，北漂的开始，就是渐渐的再向大学告别，向学校的食堂告别，向学校的图书馆告别，向学校的实验楼告别，向学校的每一棵树木告别，向学校的每一个人告别。虽然只是大四的实习，并未完全毕业离校；但是，每在一个熟悉的地方生活的久了之后，就感觉离别总是不舍。
如今我重新出发，只身前往北京实习，不是什么一线互联网大厂，但是，依旧不影响我去公司的激动心情，这一次我是实习生，来的时候北京有三三两两的好友等我，这一路也很庆幸。
随机生成一篇没有主题、没有意义、没有干货的算不上文章的文章，记录或吐槽这枯燥的、潦草的、无规律的算不上生活的生活，一个在互联网苟延残喘的Looper。
公 众 号：looper梦呓
知 乎：looper</description>
    </item>
    
  </channel>
</rss>
