<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>looper梦呓</title>
    <link>https://1004032560.github.io/</link>
    <description>Recent content on looper梦呓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Sun, 11 Apr 2021 15:15:09 +0800</lastBuildDate><atom:link href="https://1004032560.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Java基础】面向对象的三大特征</title>
      <link>https://1004032560.github.io/posts/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</link>
      <pubDate>Sun, 11 Apr 2021 15:15:09 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/java%E5%9F%BA%E7%A1%80%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</guid>
      <description>1、面向对象的特征 面向对象的最终目的是要构建强健、安全、高效的项目，也就是要实现项目的高内聚和低耦合：
 高内聚：把该模块的内部数据，功能细节隐藏在模块内部，不允许外界直接干预，只能通过公开的接口访问。 低耦合：该模块只需要给外界暴露少量功能方法，模块之间相互依赖的程度不高。  封装： 「封装」字面意思是把某个东西装起来，不让外界看到，也体现出了「简洁美」。
例如：洗衣机只能看到外部操作按钮，洗衣服时无需关注洗衣机内部原理，也不会看到内部凌乱的走线，影响用户体验。
在面向对象的思想中「封装」则表示在一个实体类中将属性私有化，提供一些外部可以访问该属性的方法；
或者对功能实现类进行抽象化，提炼出接口，只供外界调用，不对外暴露该方法的具体实现。
继承： 「继承」字面意思是父与子之间发生的一种关系。
在面向对象的思想中「继承」是指从已有类得到继承信息创建新类的过程。
提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。
继承让变化中的软件系统有了一定的延续性。
Object 类是所有类的父类（树结构中的根节点） 。当一个类没有显式声明父类，则该类会隐式继承 Object 类。
多态： 多态性是指允许不同子类型的对象对同一消息作出不同的响应（动物需要吃东西，小猫吃猫粮，小狗吃狗粮）。
简单的说就是用同样的「对象引用」调用同样的方法但是做了不同的事情（new 一个动物的「对象引用」调用 eat() 方法，但是小猫吃了猫粮，小狗吃了狗粮）。
多态性分为编译时的多态性和运行时的多态性。
方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写 （override）实现的是运行时的多态性（也称为后绑定）。
运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1. 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2. 对象造型（用父类型引用指向子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。
抽象： 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。
接口属于特殊化的抽象，接口可以被其他类实现。
一个类只能继承一个父类，但是可以实现多个接口。</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://1004032560.github.io/about/about/</link>
      <pubDate>Fri, 09 Apr 2021 10:41:07 +0800</pubDate>
      
      <guid>https://1004032560.github.io/about/about/</guid>
      <description>「互联网」码农
微信公众号：looper梦呓
哔哩哔哩：looper梦呓
知乎：looper
今日头条：looper</description>
    </item>
    
    <item>
      <title>HUGO</title>
      <link>https://1004032560.github.io/posts/hugo/</link>
      <pubDate>Wed, 07 Apr 2021 09:29:46 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/hugo/</guid>
      <description># 创建一个名为「looper梦呓」的 HUGO 站点 hugo new site looper梦呓 # 在「looper梦呓」目录中新建一个 themes 的文件夹用于存储主题 # Hugo Themes : https://themes.gohugo.io # 创建一篇名为「HUGO基本命令」的文章 hugo new posts/HUGO基本命令.md # 启动 HUGO 站点 hugo server # 编译 HUGO 站点内容，生成 public 文件夹 hugo -D 人活着总是要做事情的，既然要做，就要去做有价值的事，既然要做，就要把它做好。</description>
    </item>
    
    <item>
      <title>HUGO基本命令</title>
      <link>https://1004032560.github.io/posts/hugo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</link>
      <pubDate>Tue, 06 Apr 2021 16:14:57 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/hugo%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</guid>
      <description># 创建一个名为「looper梦呓」的 HUGO 站点 hugo new site looper梦呓 # 在「looper梦呓」目录中新建一个 themes 的文件夹用于存储主题 # Hugo Themes : https://themes.gohugo.io # 创建一篇名为「HUGO基本命令」的文章 hugo new posts/HUGO基本命令.md # 启动 HUGO 站点 hugo server # 编译 HUGO 站点内容，生成 public 文件夹 hugo -D 人活着总是要做事情的，既然要做，就要去做有价值的事，既然要做，就要把它做好。</description>
    </item>
    
    <item>
      <title>订单中心数据表</title>
      <link>https://1004032560.github.io/posts/%E8%AE%A2%E5%8D%95%E4%B8%AD%E5%BF%83%E6%95%B0%E6%8D%AE%E8%A1%A8/</link>
      <pubDate>Fri, 16 Oct 2020 17:38:23 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E8%AE%A2%E5%8D%95%E4%B8%AD%E5%BF%83%E6%95%B0%E6%8D%AE%E8%A1%A8/</guid>
      <description>订单中心数据表 uoc_special_apply_order：特价支付表单
uoc_special_apply_ord_item：特价支付明细表单
uoc_special_apply_approval：特价支付审批表单</description>
    </item>
    
    <item>
      <title>学习路线</title>
      <link>https://1004032560.github.io/posts/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Fri, 16 Oct 2020 14:16:27 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
      <description>Java后端开发路线规划 Java基础
集合
线程
IO
MySql
Spring
MyBatis
SpringMVC
SpringBoot
Redis
Dubbo
Zookeeper
RabbitMQ
Linux
Docker</description>
    </item>
    
    <item>
      <title>My First Post</title>
      <link>https://1004032560.github.io/posts/my-first-post/</link>
      <pubDate>Thu, 15 Oct 2020 15:38:23 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/my-first-post/</guid>
      <description>Hello World </description>
    </item>
    
  </channel>
</rss>
