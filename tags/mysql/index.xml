<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MySQL on looper梦呓</title>
    <link>https://1004032560.github.io/tags/mysql/</link>
    <description>Recent content in MySQL on looper梦呓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Tue, 11 May 2021 23:59:29 +0800</lastBuildDate><atom:link href="https://1004032560.github.io/tags/mysql/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【MySQL】归纳</title>
      <link>https://1004032560.github.io/posts/mysql%E5%BD%92%E7%BA%B3/</link>
      <pubDate>Tue, 11 May 2021 23:59:29 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E5%BD%92%E7%BA%B3/</guid>
      <description>MySQL归纳  【MySQL】SQL 简介 【MySQL】基础架构 【MySQL】数据定义语言 DDL 【MySQL】数据管理语言 DML 【MySQL】数据查询语言DQL  </description>
    </item>
    
    <item>
      <title>【MySQL】数据定义语言DDL</title>
      <link>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80ddl/</link>
      <pubDate>Tue, 11 May 2021 07:08:34 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E5%AE%9A%E4%B9%89%E8%AF%AD%E8%A8%80ddl/</guid>
      <description>数据定义语言DDL(Data Definition Language) 对象：数据库和表
关键词：create、alter、drop、truncate(删除当前表再新建一个一模一样的表结构)
1、数据库管理 1.1 创建数据库： # 创建数据库 如果不存在 设置字符集 CREATE DATABASE [IF NOT EXISTS] 库名 [ CHARACTER SET 字符集名]; create database [if not exists] school [character set utf8]; 1.2 修改数据库： # 数据库重命名 RENAME DATABASE 旧库名 TO 新库名; rename database shcool to new_school; # 修改数据库字符集 ALTER DATABASE 库名 CHARACTER SET 字符集名; alter database school character set utf64; 1.3 删除数据库： # 删除数据库 如果存在 drop database [if exists] school; 1.4 切换数据库： use school; 2、表管理 2.</description>
    </item>
    
    <item>
      <title>【MySQL】数据查询语言DQL</title>
      <link>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80dql/</link>
      <pubDate>Tue, 11 May 2021 06:09:35 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80dql/</guid>
      <description>数据查询语言DQL(Data Query language) 对象：表数据
关键词：select
 1、基础查询 1.1 语法 SELECT 查询列表 FROM 表名; 1.2 特点  查询列表可以是字段、常量、函数和表达式。 查询结果为「虚拟表」。  1.3 示例 1、查询单个字段：SELECT 字段名 FROM 表名;
2、查询多个字段：SELECT 字段名,字段名 FROM 表名;
3、查询所有字段：SELECT * FROM 表名;
4、查询常量：SELECT 常量值;
注意：字符型和日期型的常量值必须用单引号引起来，数值型不需要。
5、查询函数：SELECT 函数名(实参列表); 6、查询表达式：SELECT 100/25;
7、起别名：SELECT 字段名 AS &amp;ldquo;别名&amp;rdquo; FROM 表名;
注意：别名可以使用单引号、双引号引起来，当只有一个单词时，可以省略引号，当有多个单词且有空格或特殊符号时，不能省略，AS可以省略。
8、去重复：SELECT DISTINCT 字段名 FROM 表名;
9、做加法
 SELECT 数值+数值; 直接运算 SELECT 字符+数值; 首先先将字符转换为整数，如果转换成功，则继续运算，如果转换失败，则默认为0，然后继续运算 SELECT NULL+数值; NULL和任何数值参与运算结果都是NULL  10、【补充】ifnull函数
功能：判断某字段或表达式是否为 null，如果为 null，返回指定的值，否则返回原本的值
SELECT IFNULL(字段名, 指定值) FROM 表名; 11、【补充】isnull函数</description>
    </item>
    
    <item>
      <title>【MySQL】数据管理语言DML</title>
      <link>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E8%AF%AD%E8%A8%80dml/</link>
      <pubDate>Tue, 11 May 2021 06:09:34 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86%E8%AF%AD%E8%A8%80dml/</guid>
      <description>数据管理语言DML(Data Manipulatioin language) 对象：表数据
关键词：insert、update、delete
1、INSERT新增 1.1 语法 # 格式一：表名后的字段可以不按照表中顺序放，但是值必须和字段对应。 INSERT INTO 表名【字段1，字段2，...，字段n】 values(值1，值2，...，值n); # 格式二：省略表名后的字段，但是值必须按照表字段顺序。 INSERT INTO 表名 values(值1，值2，...，值n); 1.2 特点  要求值的类型和字段的类型要一致或兼容 字段的个数和顺序不一定与原始表中的字段个数和顺序一致，但必须保证值和字段一一对应 假如表中有可以为null的字段，注意可以通过以下两种方式插入null值：①字段和值都省略、②字段写上，值使用null 字段和值的个数必须一致 字段名可以省略，默认所有列 方式一支持一次插入多行，语法如下：INSERT INTO 表名【(字段名,…)】 VALUES(值,…),(值,…),…; 方式一支持子查询，语法如下：INSERT INTO 表名 查询语句;  1.3 总结  项目中经常使用格式一，SQL清晰，明确，日志信息也比较直观。 项目中多使用批量插入，一般循环值，拼接多个，用逗号隔开。   2、UPDATE更新 2.1 语法 1、单表更新
UPDATE 表名 SET 列 = 值,... WHERE 查询条件; 2、多表更新
#sql92语法： UPDATE 表1 别名, 表2 别名 SET 列 = 值, ... WHERE 连接条件 AND 筛选条件 ; #sql99语法： UPDATE 表1 别名 INNER | LEFT | RIGHT JOIN 表2 别名 ON 连接条件 SET 列 = 值, .</description>
    </item>
    
    <item>
      <title>【MySQL】基础架构</title>
      <link>https://1004032560.github.io/posts/mysql%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</link>
      <pubDate>Tue, 11 May 2021 06:07:29 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysql%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84/</guid>
      <description>MySQL 可以分为 Server 层和存储引擎层两部分
Server 层包括连接器、查询缓存、分析器、优化器、执行器等，涵盖 MySQL 的大多数核心服务功能，以及所有的内置函数（如日期、时间、数学和加密函数等），所有跨存储引擎的功能都在这一层实现，比如存储过程、触发器、视图等。
而存储引擎层负责数据的存储和提取。其架构模式是插件式的，支持 InnoDB、MyISAM、Memory 等多个存储引擎。现在最常用的存储引擎是 InnoDB，它从 MySQL 5.5.5版本开始成为了默认存储引擎。</description>
    </item>
    
    <item>
      <title>【MySQL】SQL简介</title>
      <link>https://1004032560.github.io/posts/mysqlsql%E7%AE%80%E4%BB%8B/</link>
      <pubDate>Tue, 11 May 2021 06:06:29 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/mysqlsql%E7%AE%80%E4%BB%8B/</guid>
      <description>SQL简介 SQL（Structured Query Language）结构化查询语言，用来访问和操作数据库系统。
不同的数据库，都支持标准 SQL，因此 SQL 这一种语言，就可以操作各种不同的数据库。大部分数据库都支持标准的 SQL，但是部分数据库在不常用的 SQL 上扩展了一些功能。而各个数据库支持的各自扩展的功能，通常我们把它们称之为&amp;quot;方言&amp;quot;。
1、SQL 语言分类： DDL：数据定义语言（Data Definition Language）是用来创建、修改、删除数据库和表的操作。
DML：数据管理语言（Data Manipulate Language）是用来对表数据进行增、删、改的操作。
DQL：数据查询语言（Data Query Language）是用来对表数据进行查询（查询的重要性）的操作。
DCL：数据控制语言（Data Control Language）是用来设置或更改数据库用户或角色权限的操作。
2、数据库的常见分类 关系型数据库：MySQL、Oracle、DB2、SQL Server 非关系型数据库：
 键值存储数据库：Redis、Memcached、MemcacheDB 列存储数据库：HBase、Cassandra 面向文档的数据库：MongDB、CouchDB 图形数据库：Neo4J  3、主流关系数据库 目前，主流的关系数据库主要分为以下几类：
 商用数据库，例如：Oracle，SQL Server，DB2 等； 开源数据库，例如：MySQL，PostgreSQL 等； 桌面数据库，以微软 Access 为代表，适合桌面应用程序使用； 嵌入式数据库，以 Sqlite 为代表，适合手机应用和桌面程序。  4、SQL 数据类型： 对于一个关系表，除了定义每一列的名称外，还需要定义每一列的数据类型。关系数据库支持的标准数据类型包括数值、字符串、时间等：
   名称 类型 说明     INT 整型 4字节整数类型，范围约+/-21亿   BIGINT 长整型 8字节整数类型，范围约   REAL 浮点型 4字节浮点数，范围约   DOUBLE 浮点型 8字节浮点数，范围约   DECIMAL(M,N) 高精度小数 由用户指定精度的小数，例如，DECIMAL(20,10)表示一共20位，其中小数10位，通常用于财务计算   CHAR(N) 定长字符串 存储指定长度的字符串，例如，CHAR(100)总是存储100个字符的字符串   VARCHAR(N) 变长字符串 存储可变长度的字符串，例如，VARCHAR(100)可以存储0~100个字符的字符串   BOOLEAN 布尔类型 存储True或者False   DATE 日期类型 存储日期，例如，2018-06-22   TIME 时间类型 存储时间，例如，12:20:59   DATETIME 日期和时间类型 存储日期+时间，例如，2018-06-22 12:20:59    选择数据类型的时候，要根据业务规则选择合适的类型。通常来说，BIGINT 能满足整数存储的需求，VARCHAR(N) 能满足字符串存储的需求，这两种类型是使用最广泛的。</description>
    </item>
    
  </channel>
</rss>
