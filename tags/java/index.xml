<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on looper梦呓</title>
    <link>https://1004032560.github.io/tags/java/</link>
    <description>Recent content in Java on looper梦呓</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>[Home](/) &amp;#183; Theme [Simpleness](https://github.com/RainerChiang/simpleness) Powered by [Hugo](https://gohugo.io/)</copyright>
    <lastBuildDate>Thu, 10 Feb 2022 17:15:59 +0800</lastBuildDate><atom:link href="https://1004032560.github.io/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>【Dubbo】注册中心</title>
      <link>https://1004032560.github.io/posts/dubbo%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</link>
      <pubDate>Thu, 10 Feb 2022 17:15:59 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/dubbo%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83/</guid>
      <description>【Dubbo】注册中心 Zookeeper 1、下载 Zookeeper 压缩包，配置 conf 目录下的 zoo.cof 文件，打开 bin 目录下的 zkServer.cmd 就启动注册中心了。</description>
    </item>
    
    <item>
      <title>【Dubbo】Dubbo</title>
      <link>https://1004032560.github.io/posts/dubbodubbo/</link>
      <pubDate>Thu, 10 Feb 2022 17:14:59 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/dubbodubbo/</guid>
      <description>【Dubbo】Dubbo 1、架构发展演变 单体架构（ORM）： 一台服务器部署整个应用。
问题：修改某一处功能，整个应用都需要重新打包重新部署；协同开发不易。
垂直架构（MVC）： 按照模块分成多个应用，订单页面订单后端为一个应用，商品页面商品后端为一个应用等。
问题：应用之间需要交互，交互成本高。
分布式架构（RPC）： 垂直应用越来越多，应用之间还需要交互；分布式架构则将垂直应用的核心业务抽取出来，通过远程过程调用的方式进行交互。同一台服务器叫做进程内调用；两台服务器之间叫做远程过程调用。
流动计算架构（SOA）： 基于访问压力实时管理分布式集群的容量，提高集群的利用率。
2、RPC远程过程调用 RPC 是一种进程间的通信方式，是一种技术思想，而不是规范。它允许一台服务的程序调用另一个台服务器的函数、方法。
3、Dubbo 分布式框架Dubbo架构：框架容器（Container）、注册中心（Registry）、服务提供者（Provider）、服务消费者（Consumer）、监控中心（Monitor）
Dubbo启动是，Container容器初始化，服务提供者Provider向注册中心Registry注册服务，服务消费者Consumer向注册中心订阅服务，Provider进行服务变更之后，Registry还会通过长连接的方式将这次变更推送给Consumer。Consumer可以通过Register提供的服务信息，调用Provider的服务（负载均衡调用）。每次的调用信息都会定时的发送到监控中心，监控中心就会知道服务的情况。</description>
    </item>
    
    <item>
      <title>【Java】面向对象的三大特征</title>
      <link>https://1004032560.github.io/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</link>
      <pubDate>Sun, 11 Apr 2021 15:15:09 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/java%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%B8%89%E5%A4%A7%E7%89%B9%E5%BE%81/</guid>
      <description>1、面向对象的特征 面向对象的最终目的是要构建强健、安全、高效的项目，也就是要实现项目的高内聚和低耦合：
 高内聚：把该模块的内部数据，功能细节隐藏在模块内部，不允许外界直接干预，只能通过公开的接口访问。 低耦合：该模块只需要给外界暴露少量功能方法，模块之间相互依赖的程度不高。  封装： 「封装」字面意思是把某个东西装起来，不让外界看到，也体现出了「简洁美」。
例如：洗衣机只能看到外部操作按钮，洗衣服时无需关注洗衣机内部原理，也不会看到内部凌乱的走线，影响用户体验。
在面向对象的思想中「封装」则表示在一个实体类中将属性私有化，提供一些外部可以访问该属性的方法；
或者对功能实现类进行抽象化，提炼出接口，只供外界调用，不对外暴露该方法的具体实现。
继承： 「继承」字面意思是父与子之间发生的一种关系。
在面向对象的思想中「继承」是指从已有类得到继承信息创建新类的过程。
提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。
继承让变化中的软件系统有了一定的延续性。
Object 类是所有类的父类（树结构中的根节点） 。当一个类没有显式声明父类，则该类会隐式继承 Object 类。
多态： 多态性是指允许不同子类型的对象对同一消息作出不同的响应（动物需要吃东西，小猫吃猫粮，小狗吃狗粮）。
简单的说就是用同样的「对象引用」调用同样的方法但是做了不同的事情（new 一个动物的「对象引用」调用 eat() 方法，但是小猫吃了猫粮，小狗吃了狗粮）。
多态性分为编译时的多态性和运行时的多态性。
方法重载（overload）实现的是编译时的多态性（也称为前绑定），而方法重写 （override）实现的是运行时的多态性（也称为后绑定）。
运行时的多态是面向对象最精髓的东西，要实现多态需要做两件事：1. 方法重写（子类继承父类并重写父类中已有的或抽象的方法）；2. 对象造型（用父类型引用指向子类型对象，这样同样的引用调用同样的方法就会根据子类对象的不同而表现出不同的行为）。
抽象： 在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。
抽象是将一类对象的共同特征总结出来构造类的过程，包括数据抽象和行为抽象两方面。抽象只关注对象有哪些属性和行为，并不关注这些行为的细节是什么。
接口属于特殊化的抽象，接口可以被其他类实现。
一个类只能继承一个父类，但是可以实现多个接口。</description>
    </item>
    
    <item>
      <title>学习路线</title>
      <link>https://1004032560.github.io/posts/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</link>
      <pubDate>Fri, 16 Oct 2020 14:16:27 +0800</pubDate>
      
      <guid>https://1004032560.github.io/posts/%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</guid>
      <description>Java后端开发路线规划 Java基础
集合
线程
IO
MySql
Spring
MyBatis
SpringMVC
SpringBoot
Redis
Dubbo
Zookeeper
RabbitMQ
Linux
Docker</description>
    </item>
    
  </channel>
</rss>
